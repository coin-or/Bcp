// BCP parameters
BCP_LpVerb_RelaxedSolution	0  // 0 means no, 1 means true
BCP_LpVerb_FinalRelaxedSolution	0
BCP_LpVerb_HeurFeasibleSolution	0
BCP_LpVerb_FeasibleSolution	0

BCP_TmVerb_AllFeasibleSolutionValue      1
BCP_TmVerb_AllFeasibleSolution      0
BCP_TmVerb_BetterFeasibleSolutionValue      1
BCP_TmVerb_BetterFeasibleSolution      0
BCP_TmVerb_BestFeasibleSolutionValue      1
BCP_TmVerb_BestFeasibleSolution      1

BCP_DoReducedCostFixingAtZero		0
BCP_DoReducedCostFixingAtAnything	0

BCP_MaxPresolveIter                     -1 # to disable strong branching

BCP_MessagePassingIsSerial              1 // defaults to serial
                                          // if you want parallel you do more
BCP_LpValueIsTrueLowerBound		0
BCP_SolveLpToOptimality			1

*******************************************************************************

// what we set meant that IF diving happens then keep the upper child
// how diving happens is complex
// if you flip a coin and succeed, you dive down until you fathom the
// node some how. 
// Now if you didn't pass this probability then a test is done
// between the lb of the current node and the best lower bound
// and uh if there are reasonable close to each other then 
// diving is allowed.

// so..I have the lowest lower bound some where, I have the best chance
// of finding the optimial solution there
// diving is cheap with the way BCP is set up
// you wnat to dive as frequently as you can when you're lower bound
// is pretty good. 
BCP_UnconditionalDiveProbability 1.0

// ratio of current lb to best lb, if you have a ub
// used in deciding to dive.
// (our bounds don't mean anything to us, so why not take the 
// computationally cheapest path
BCP_LBRatioToAllowDiving_HasUB   -1

BCP_LBRatioToAllowDiving_NoUB    -1

// difference between two feasible solutions.
// we have integer values so...
BCP_Granularity	.99

# Used only if BCP selects branching objects
# but not true that they will be ignored if strong branching is disabled
# can have str. branching disabled, and have BCP select branching object
# BCP_StrongBranch_CloseToHalfNum 0
# BCP_StrongBranch_CloseToOneNum 3

*******************************************************************************

Vol_lambdaInit     0.1
Vol_alphaInit     0.01
Vol_alphaFactor     0.5
Vol_alphaMin     0.000005
Vol_primalAbsPrecision     0.01
Vol_gapAbsPrecision     1.0
Vol_gapRelPrecision     0.01
Vol_granularity     0
Vol_minimumRelAscent     0.0001
Vol_printFlag     1
Vol_printInterval     5000
Vol_greenTestInterval     1
Vol_yellowTestInterval     2
Vol_redTestInterval     10
Vol_alphaInt     200
Vol_maxSubGradientIterations     2000
Vol_ascentFirstCheck     1000000
Vol_ascentCheckInterval     80

*******************************************************************************

CSP_InputFile Data/cspdata3.dat
CSP_LpSolverMessageSuppression 3

CSP_BranchingStrategy		0

CSP_combineExclusionConstraints	1
CSP_addKnapsackMirConstraints	1
CSP_addKnifeMirConstraints	1

CSP_UseBranchAndCutInHeurIP	1
CSP_UseBranchAndCutInSubProb	0
CSP_HeurIpFrequency		0
CSP_HeurIpMaxTreeSize 		5000
CSP_LpSolver			0   # 0:simplex  1:volume
CSP_PerturbNum			50
CSP_PerturbFactor		.97
